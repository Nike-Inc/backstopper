// ========== GRADLE PLUGINS / REPOSITORIES SETUP
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
    }
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'project-report'

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: classes) {
        classifier = 'javadoc'
        from javadoc
    }

    javadoc {
        failOnError = false
    }

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    artifacts {
        archives sourcesJar, javadocJar
    }

    repositories {
        mavenCentral()
    }

    idea {
        module {
            downloadSources = true
        }
    }

    test {
        // Minimize console spam while running tests without swallowing critical debugging info.
        testLogging {
            exceptionFormat "FULL"
            events "skipped", "failed"
            displayGranularity = 0
            showExceptions true
            showCauses true
            showStackTraces true
        }

        ignoreFailures = false
    }

    // http://www.gradle.org/docs/current/userguide/java_plugin.html
    sourceCompatibility = JavaVersion.VERSION_1_7
    targetCompatibility = JavaVersion.VERSION_1_7
}

// Disable jar, sourcesJar, and javadoc tasks for the root project - we only want them to run for submodules
jar.enabled = false
sourcesJar.enabled = false
javadocJar.enabled = false

// No javadoc for sample or testonly modules.
configure(subprojects.findAll { it.name.startsWith("sample") || it.name.startsWith("testonly") }) {
    javadoc.enabled = false
    javadocJar.enabled = false
}

// ========== PROPERTIES FOR GRADLE BUILD - DEPENDENCY VERSIONS / ETC
ext {
    slf4jVersion = '1.7.7'
    javaxInjectVersion = '1'
    javaxValidationVersion = '1.0.0.GA'
    servletApiVersion = '3.0.1'
    spring4Version = '4.3.2.RELEASE'
    spring5Version = '5.1.8.RELEASE'
    springboot1Version = '1.5.2.RELEASE'
    springboot2Version = '2.3.0.RELEASE'
    jersey1Version = '1.19.2'
    jersey2Version = '2.23.2'
    jaxRsVersion = '2.0.1'
    jaxbApiVersion = '2.4.0-b180830.0359'

    junitVersion = '4.12'
    mockitoVersion = '1.9.5'
    logbackVersion = '1.2.3'
    jacksonVersion = '2.4.2'
    assertJVersion = '3.12.2'
    junitDataproviderVersion = '1.10.1'
    hamcrestVersion = '1.3'
    hibernateValidatorVersion = '4.3.0.Final'
    hibernateValidatorVersionForNewerSpring = '6.2.2.Final'
    elApiVersion = '3.0.1-b06'
    elImplVersion = '3.0.1-b12'

    jetbrainsAnnotationsVersion = '16.0.3'

    orgReflectionsVersion = '0.9.11'
    javassistVersion = '3.18.2-GA'

    jettyVersion = '9.2.19.v20160908'
    restAssuredVersion = '3.0.1'

    // JACOCO PROPERTIES
    jacocoToolVersion = '0.8.4'
    // Anything in this jacocoExclusions list will be excluded from coverage reports. The format is paths to class
    //      files, with wildcards allowed. e.g.: jacocoExclusions = [ "com/nike/Foo.class", "**/Bar*.*" ]
    jacocoExclusions = []
    jacocoCoverageThresholdSetup = {
        configure(subprojects.findAll { isSubprojectIncludedInJacocoReports(it) }) {
            // Configure the minimum code coverage rules.
            jacocoTestCoverageVerification { JacocoCoverageVerification v ->
                violationRules {
                    rule { JacocoViolationRule r ->
                        enabled = true
                        limit {
                            minimum = 0.9
                            counter = "INSTRUCTION"
                        }

                    }

                    rule { JacocoViolationRule r ->
                        enabled = true
                        limit {
                            minimum = 0.9
                            counter = "BRANCH"
                        }
                    }
                }
            }
        }
    }
    // Configure which subprojects we're doing jacoco for.
    isSubprojectIncludedInJacocoReports = { Project subProj ->
        // For this repo we'll include everything that's not a sample or testonly module.
        return !subProj.name.startsWith("sample") && !subProj.getName().startsWith("testonly")
    }
}

// ========== COMBO TEST REPORT - View the combined/merged report at: [project_root]/build/reports/tests/index.html
apply from: file(rootProject.projectDir.getAbsolutePath() + '/gradle/junitComboTestReport.gradle')

// ========== JACOCO SETUP - View the combined/merged report at: [project_root]/build/reports/jacoco/jacocoRootReport/html/index.html.
//                           Individual reports for each submodule can be found at: [project_root]/[submodule]/build/reports/jacoco/test/html/index.html
apply from: file(rootProject.projectDir.getAbsolutePath() + '/gradle/jacoco.gradle')
