evaluationDependsOn(':')

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

dependencies {
    api(
            project(":backstopper-jackson"),
            project(":backstopper-spring-web"),
    )
    compileOnly(
            "org.jetbrains:annotations:$jetbrainsAnnotationsVersion",
            "org.springframework:spring-webflux:$spring5Version",
            "org.springframework:spring-context:$spring5Version",
    )
    testImplementation(
            project(":backstopper-core").sourceSets.test.output,
            project(":backstopper-custom-validators"),
            "org.jetbrains:annotations:$jetbrainsAnnotationsVersion",
            "junit:junit:$junitVersion",
            "org.mockito:mockito-core:$mockitoVersion",
            "ch.qos.logback:logback-classic:$logbackVersion",
            "org.assertj:assertj-core:$assertJVersion",
            "com.tngtech.java:junit-dataprovider:$junitDataproviderVersion",
            "io.rest-assured:rest-assured:$restAssuredVersion",
            "org.hibernate:hibernate-validator:$hibernateValidatorVersionForNewerSpring",
            "javax.el:javax.el-api:$elApiVersion", // The el-api and el-impl are needed for the JSR 303 validation
            "org.glassfish:javax.el:$elImplVersion",
            // The jaxb-api is needed for building on the java 11 JDK as these classes were moved out of the Java SE libs.
            "javax.xml.bind:jaxb-api:$jaxbApiVersion",
    )
    // No idea why spring decided to package up mockito as a transitive dependency, but their version breaks us.
    testImplementation("org.springframework.boot:spring-boot-starter-webflux:$springboot2Version") {
        exclude group: 'org.mockito', module: 'mockito-core'
    }
}
