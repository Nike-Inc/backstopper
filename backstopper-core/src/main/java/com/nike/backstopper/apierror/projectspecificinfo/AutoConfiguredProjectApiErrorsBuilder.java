package com.nike.backstopper.apierror.projectspecificinfo;

import com.nike.backstopper.apierror.ApiError;
import com.nike.backstopper.apierror.ApiErrorValue;
import com.nike.backstopper.apierror.sample.SampleProjectApiErrorsBase;
import com.nike.backstopper.model.AutoGeneratedApiError;
import org.jetbrains.annotations.NotNull;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Set;

import static com.nike.backstopper.apierror.projectspecificinfo.ProjectSpecificErrorCodeRange.ALLOW_ALL_ERROR_CODES;

/**
 * Builds {@link ProjectApiErrors} using {@link AutoGeneratedApiError} based on {@link ApiErrorValue}.
 * Since {@link ProjectApiErrors} uses the default constructor for a fast failure
 * the implementation is based on anonymous classes.
 *
 * @author Andrey Tsarenko
 */
public class AutoConfiguredProjectApiErrorsBuilder {

    private AutoConfiguredProjectApiErrorsBuilder() {
        // do nothing.
    }

    /**
     * Builds an auto-configured {@link SampleProjectApiErrorsBase} using {@link AutoGeneratedApiError}:
     * 1. {@link SampleProjectApiErrorsBase#getProjectSpecificApiErrors()}
     * returns immutable {@link AutoGeneratedApiError}
     * 2. {@link SampleProjectApiErrorsBase#getProjectSpecificErrorCodeRange()}
     * returns {@link ProjectSpecificErrorCodeRange#ALLOW_ALL_ERROR_CODES}
     *
     * @param autoGeneratedApiErrors the errors based on {@link ApiErrorValue}.
     * @return the new auto-configured {@link ProjectApiErrors}.
     */
    public static ProjectApiErrors buildAutoConfiguredProjectApiErrors(@NotNull final Set<ApiError> autoGeneratedApiErrors) {
        final List<ApiError> projectSpecificApiErrors = Collections.unmodifiableList(
                new ArrayList<>(autoGeneratedApiErrors));

        return new SampleProjectApiErrorsBase() {

            @Override
            protected List<ApiError> getProjectSpecificApiErrors() {
                return projectSpecificApiErrors;
            }

            @Override
            protected ProjectSpecificErrorCodeRange getProjectSpecificErrorCodeRange() {
                return ALLOW_ALL_ERROR_CODES;
            }

        };
    }

    /**
     * Builds a delegated {@link ProjectApiErrors} using {@link AutoGeneratedApiError}:
     * 1. {@link ProjectApiErrors#getProjectSpecificApiErrors()}
     * returns existing {@link ApiError} merged with {@link AutoGeneratedApiError} as immutable list
     * 2. delegates all other methods to the origin {@link ProjectApiErrors}
     *
     * @param originProjectApiErrors the origin {@link ProjectApiErrors} to delegate.
     * @param autoGeneratedApiErrors the errors based on {@link ApiErrorValue}.
     * @return the new delegated {@link ProjectApiErrors}.
     */
    public static ProjectApiErrors buildDelegatedProjectApiErrors(@NotNull final ProjectApiErrors originProjectApiErrors,
                                                                  @NotNull final Set<ApiError> autoGeneratedApiErrors) {
        final List<ApiError> mergedProjectSpecificApiErrors = new ArrayList<>(
                originProjectApiErrors.getProjectSpecificApiErrors());
        mergedProjectSpecificApiErrors.addAll(autoGeneratedApiErrors);

        return new ProjectApiErrors() {

            @Override
            protected List<ApiError> getCoreApiErrors() {
                return originProjectApiErrors.getCoreApiErrors();
            }

            @Override
            protected List<ApiError> getProjectSpecificApiErrors() {
                return mergedProjectSpecificApiErrors;
            }

            @Override
            protected ProjectSpecificErrorCodeRange getProjectSpecificErrorCodeRange() {
                return originProjectApiErrors.getProjectSpecificErrorCodeRange();
            }

            @Override
            public ApiError getGenericServiceError() {
                return originProjectApiErrors.getGenericServiceError();
            }

            @Override
            public ApiError getOusideDependencyReturnedAnUnrecoverableErrorApiError() {
                return originProjectApiErrors.getOusideDependencyReturnedAnUnrecoverableErrorApiError();
            }

            @Override
            public ApiError getServersideValidationApiError() {
                return originProjectApiErrors.getServersideValidationApiError();
            }

            @Override
            public ApiError getTemporaryServiceProblemApiError() {
                return originProjectApiErrors.getTemporaryServiceProblemApiError();
            }

            @Override
            public ApiError getOutsideDependencyReturnedTemporaryErrorApiError() {
                return originProjectApiErrors.getOutsideDependencyReturnedTemporaryErrorApiError();
            }

            @Override
            public ApiError getGenericBadRequestApiError() {
                return originProjectApiErrors.getGenericBadRequestApiError();
            }

            @Override
            public ApiError getMissingExpectedContentApiError() {
                return originProjectApiErrors.getMissingExpectedContentApiError();
            }

            @Override
            public ApiError getTypeConversionApiError() {
                return originProjectApiErrors.getTypeConversionApiError();
            }

            @Override
            public ApiError getMalformedRequestApiError() {
                return originProjectApiErrors.getMalformedRequestApiError();
            }

            @Override
            public ApiError getUnauthorizedApiError() {
                return originProjectApiErrors.getUnauthorizedApiError();
            }

            @Override
            public ApiError getForbiddenApiError() {
                return originProjectApiErrors.getForbiddenApiError();
            }

            @Override
            public ApiError getNotFoundApiError() {
                return originProjectApiErrors.getNotFoundApiError();
            }

            @Override
            public ApiError getMethodNotAllowedApiError() {
                return originProjectApiErrors.getMethodNotAllowedApiError();
            }

            @Override
            public ApiError getNoAcceptableRepresentationApiError() {
                return originProjectApiErrors.getNoAcceptableRepresentationApiError();
            }

            @Override
            public ApiError getUnsupportedMediaTypeApiError() {
                return originProjectApiErrors.getUnsupportedMediaTypeApiError();
            }

            @Override
            public ApiError getTooManyRequestsApiError() {
                return originProjectApiErrors.getTooManyRequestsApiError();
            }

        };
    }

}
