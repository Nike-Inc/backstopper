package com.nike.backstopper.service;

import com.nike.backstopper.apierror.ApiError;
import com.nike.backstopper.exception.AutoGeneratedApiErrorServiceException;
import com.nike.backstopper.mapper.ApiErrorValidationMessagesMapper;
import com.nike.backstopper.model.ApiErrorValueMetadata;
import com.nike.backstopper.model.AutoGeneratedApiError;

import java.io.ObjectInputStream;
import java.net.URL;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Set;

/**
 * Finds {@link AutoGeneratedApiError}s from {@code META-INF/api-error-value-metadata} file.
 *
 * @author Andrey Tsarenko
 */
public class AutoGeneratedApiErrorService {

    public static final String API_ERROR_VALUE_METADATA_PATH = "META-INF/api-error-value-metadata";

    private final ApiErrorValidationMessagesMapper apiErrorValidationMessagesMapper;

    public AutoGeneratedApiErrorService(ApiErrorValidationMessagesMapper apiErrorValidationMessagesMapper) {
        this.apiErrorValidationMessagesMapper = apiErrorValidationMessagesMapper;
    }

    /**
     * Finds and deserializes {@link ApiErrorValueMetadata}s from {@code META-INF/api-error-value-metadata} files and:
     * 1. constructs {@link AutoGeneratedApiError}s
     * 2. maps {@link AutoGeneratedApiError#getMessage()}s to {@code ValidationMessages.properties}
     * If no {@link ApiErrorValueMetadata}s are found, return an empty set.
     *
     * @return immutable set of the mapped errors.
     * @throws AutoGeneratedApiErrorServiceException if the processing failed.
     * @see ApiErrorValidationMessagesMapper
     */
    public Set<ApiError> findAutoGeneratedApiErrors() {
        try {
            Enumeration<URL> metadataResources = getClass().getClassLoader()
                    .getResources(API_ERROR_VALUE_METADATA_PATH);
            Set<ApiError> apiErrors = new HashSet<>();

            while (metadataResources.hasMoreElements()) {
                Set<AutoGeneratedApiError> mappedApiErrors = apiErrorValidationMessagesMapper.mapToValidationMessageProperties(
                        readApiErrors(metadataResources.nextElement()));
                apiErrors.addAll(mappedApiErrors);
            }
            return Collections.unmodifiableSet(apiErrors);
        } catch (Exception e) {
            throw new AutoGeneratedApiErrorServiceException("Unable to load ApiError: " + e.getMessage(), e);
        }
    }

    @SuppressWarnings("unchecked")
    private Set<AutoGeneratedApiError> readApiErrors(URL metadataResource) throws Exception {
        Set<AutoGeneratedApiError> apiErrors = new HashSet<>();

        ObjectInputStream objectInputStream = new ObjectInputStream(metadataResource.openStream());
        Set<ApiErrorValueMetadata> ApiErrorValuesMetadata = (Set<ApiErrorValueMetadata>) objectInputStream.readObject();

        for (ApiErrorValueMetadata apiErrorValueMetadata : ApiErrorValuesMetadata) {
            AutoGeneratedApiError apiError = new AutoGeneratedApiError(apiErrorValueMetadata.getMessage(),
                    apiErrorValueMetadata.getErrorCode(), apiErrorValueMetadata.getHttpStatusCode());
            apiErrors.add(apiError);
        }
        return Collections.unmodifiableSet(apiErrors);
    }

}
