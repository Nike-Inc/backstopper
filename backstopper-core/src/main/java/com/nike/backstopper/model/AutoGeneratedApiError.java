package com.nike.backstopper.model;

import com.nike.backstopper.apierror.ApiError;
import com.nike.backstopper.apierror.ApiErrorBase;
import com.nike.backstopper.apierror.ApiErrorValue;
import com.nike.backstopper.apierror.projectspecificinfo.ProjectApiErrors;

/**
 * The model is used to represent {@link ApiError} based on {@link ApiErrorValue}.
 *
 * @author Andrey Tsarenko
 */
public class AutoGeneratedApiError extends ApiErrorBase {

    /**
     * Constructs a new {@link ApiError} using {@link ApiError#getMessage()} as {@link ApiError#getName()}
     * to provide the ability to define the {@link ApiError} in:
     * {@link ProjectApiErrors#convertToApiError(String)}
     * {@link ProjectApiErrors#convertToApiError(String, ApiError)}
     * when an exception occurs.
     *
     * @param message        from JSR 303 constraint annotation or a valid constraint annotation such as Hibernate/custom.
     * @param errorCode      from {@link ApiErrorValue#errorCode()}.
     * @param httpStatusCode from {@link ApiErrorValue#httpStatusCode()}.
     */
    public AutoGeneratedApiError(String message, String errorCode, int httpStatusCode) {
        super(message, errorCode, message, httpStatusCode);
    }

    @Override
    public boolean equals(Object o) {
        return super.equals(o);
    }

    @Override
    public int hashCode() {
        return super.hashCode();
    }

}
