package com.nike.backstopper.apierror.projectspecificinfo;

import com.nike.backstopper.apierror.ApiError;
import com.nike.backstopper.apierror.sample.SampleProjectApiErrorsBase;
import com.nike.backstopper.model.AutoGeneratedApiError;
import org.junit.Test;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * Tests the functionality of {@link AutoConfiguredProjectApiErrorsBuilder}.
 *
 * @author Andrey Tsarenko
 */
public class AutoConfiguredProjectApiErrorsBuilderTest {

    private static final ApiError FIRST_API_ERROR = new AutoGeneratedApiError(
            "firstMessageValue", "firstErrorCodeValue", 400);
    private static final ApiError SECOND_API_ERROR = new AutoGeneratedApiError(
            "secondMessageValue", "secondErrorCodeValue", 401);
    private static final ApiError THIRD_API_ERROR = new AutoGeneratedApiError(
            "thirdMessageValue", "thirdErrorCodeValue", 402);

    @Test
    public void buildAutoConfiguredProjectApiErrors() {
        ProjectApiErrors projectApiErrors = AutoConfiguredProjectApiErrorsBuilder.buildAutoConfiguredProjectApiErrors(
                Collections.singleton(FIRST_API_ERROR));

        assertThat(projectApiErrors.getProjectSpecificApiErrors()).containsOnly(FIRST_API_ERROR);
    }

    @Test
    public void buildDelegatedProjectApiErrors() {
        ProjectApiErrors projectApiErrors = AutoConfiguredProjectApiErrorsBuilder.buildDelegatedProjectApiErrors(
                new OriginProjectApiErrors(), Collections.singleton(THIRD_API_ERROR));

        assertThat(projectApiErrors.getProjectSpecificApiErrors()).hasSize(3);
        assertThat(projectApiErrors.getProjectSpecificApiErrors())
                .containsOnly(FIRST_API_ERROR, SECOND_API_ERROR, THIRD_API_ERROR);
    }

    private static class OriginProjectApiErrors extends SampleProjectApiErrorsBase {

        @Override
        protected List<ApiError> getProjectSpecificApiErrors() {
            return Arrays.asList(FIRST_API_ERROR, SECOND_API_ERROR);
        }

        @Override
        protected ProjectSpecificErrorCodeRange getProjectSpecificErrorCodeRange() {
            return ProjectSpecificErrorCodeRange.ALLOW_ALL_ERROR_CODES;
        }

    }

}
